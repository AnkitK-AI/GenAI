"""
Streamlit BRD Generator for SAS → Teradata SQL Conversion Projects with Bank-Branded Word Export
"""

import re
import io
import os
import json
import base64
from datetime import datetime

import requests
import streamlit as st
from docx import Document
from docx.shared import Pt, Inches
from docx.oxml import OxmlElement
from docx.oxml.ns import qn

# -----------------------------
# ---------- CONFIG -----------
# -----------------------------
OLLAMA_HOST = os.environ.get("OLLAMA_HOST", "http://localhost:11434")
OLLAMA_MODEL = os.environ.get("OLLAMA_MODEL", "llama3.2:3b")
LLM_TEMPERATURE = float(os.environ.get("LLM_TEMPERATURE", "0.2"))
MAX_CONTEXT_CHARS = int(os.environ.get("MAX_CONTEXT_CHARS", "60000"))
DEFAULT_PROJECT_TITLE = "SAS to Teradata Conversion BRD"
DEFAULT_AUTHOR = "Generated by GenAI BRD Assistant"

# -----------------------------
# ------ SAS/SQL HELPERS ------
# -----------------------------
SAS_TABLE_PATTERN = re.compile(r"\b(from|join)\s+([a-zA-Z_][\w\.]*)", re.IGNORECASE)
SAS_LIBNAME_PATTERN = re.compile(r"\blibname\s+([a-zA-Z_][\w]*)\b", re.IGNORECASE)
SAS_PROC_PATTERN = re.compile(r"\bproc\s+([a-zA-Z_][\w]*)\b", re.IGNORECASE)
SAS_MACRO_DEF_PATTERN = re.compile(r"%macro\s+([a-zA-Z_][\w]*)\b", re.IGNORECASE)
SAS_MACRO_CALL_PATTERN = re.compile(r"%([a-zA-Z_][\w]*)\b", re.IGNORECASE)
SAS_OUTPUT_PATTERN = re.compile(r"\b(create\s+table|data)\s+([a-zA-Z_][\w\.]*)", re.IGNORECASE)

SQL_TABLE_PATTERN = re.compile(r"\b(from|join|into|update)\s+([a-zA-Z_][\w\.]*)", re.IGNORECASE)
SQL_DDL_PATTERN = re.compile(r"\b(create\s+table|alter\s+table|drop\s+table)\b", re.IGNORECASE)
SQL_DML_PATTERN = re.compile(r"\b(insert\s+into|update\s+|merge\s+into|delete\s+from|select\b)", re.IGNORECASE)


def truncate_for_context(text: str, limit: int = MAX_CONTEXT_CHARS) -> str:
    if len(text) <= limit:
        return text
    return text[: limit - 1000] + "\n\n...[TRUNCATED FOR CONTEXT]...\n\n" + text[-1000:]


def extract_sas_metadata(sas_code: str) -> dict:
    return {
        "libnames": list({m.group(1) for m in SAS_LIBNAME_PATTERN.finditer(sas_code)}),
        "procedures": list({m.group(1) for m in SAS_PROC_PATTERN.finditer(sas_code)}),
        "macro_definitions": list({m.group(1) for m in SAS_MACRO_DEF_PATTERN.finditer(sas_code)}),
        "macro_invocations": list({m.group(1) for m in SAS_MACRO_CALL_PATTERN.finditer(sas_code)}),
        "referenced_tables": list({m.group(2) for m in SAS_TABLE_PATTERN.finditer(sas_code)}),
        "created_outputs": list({m.group(2) for m in SAS_OUTPUT_PATTERN.finditer(sas_code)}),
    }


def extract_sql_metadata(sql_code: str) -> dict:
    return {
        "referenced_tables": list({m.group(2) for m in SQL_TABLE_PATTERN.finditer(sql_code)}),
        "ddl_ops": list({m.group(0).strip() for m in SQL_DDL_PATTERN.finditer(sql_code)}),
        "dml_ops": list({m.group(0).strip() for m in SQL_DML_PATTERN.finditer(sql_code)}),
    }

# -----------------------------
# --------- LLM CALL ----------
# -----------------------------

def call_ollama(prompt: str, system: str | None = None, temperature: float = LLM_TEMPERATURE) -> str:
    payload = {
        "model": OLLAMA_MODEL,
        "prompt": prompt,
        "stream": False,
        "options": {"temperature": temperature},
    }
    if system:
        payload["system"] = system

    url = f"{OLLAMA_HOST}/api/generate"
    resp = requests.post(url, json=payload, timeout=180)
    resp.raise_for_status()
    return resp.json().get("response", "")

# -----------------------------
# -------- BRD TEMPLATE -------
# -----------------------------
SYSTEM_PROMPT = (
    "You are a senior banking business analyst. Write detailed, structured, and actionable "
    "Business Requirement Documents (BRDs) including business rules, mappings, risks, and acceptance criteria."
)

BRD_INSTRUCTIONS = """
Produce a **comprehensive, detailed** Business Requirement Document (BRD) for a SAS → Teradata SQL conversion project.
Include all standard sections, numbered headings, version history, and placeholders for TOC.
"""

def build_brd_prompt(org_name: str, project_name: str, sas_meta: dict, sql_meta: dict, sas_code: str, sql_code: str | None, extra_notes: str | None) -> str:
    today = datetime.now().strftime("%Y-%m-%d")
    sas_code_trunc = truncate_for_context(sas_code)
    sql_code_trunc = truncate_for_context(sql_code or "")

    return f"""
Organisation: {org_name}
Project: {project_name}
Date: {today}

SAS Metadata:\n{json.dumps(sas_meta, indent=2)[:4000]}
SQL Metadata:\n{json.dumps(sql_meta, indent=2)[:4000]}

SAS Code Example:\n```sas\n{sas_code_trunc}\n```
SQL Code Example:\n```sql\n{sql_code_trunc}\n```

Notes: {extra_notes or "(none)"}

{BRD_INSTRUCTIONS}
"""

# -----------------------------
# --------- WORD EXPORT -------
# -----------------------------

def create_word_brd(brd_md: str, project_title: str, author: str) -> io.BytesIO:
    doc = Document()

    # Cover Page
    doc.add_paragraph('[Bank Logo Here]', style='Title')
    doc.add_paragraph(project_title or DEFAULT_PROJECT_TITLE, style='Title')
    doc.add_paragraph(f'Author: {author or DEFAULT_AUTHOR}', style='Normal')
    doc.add_paragraph(f'Date: {datetime.now().strftime("%Y-%m-%d")}', style='Normal')
    doc.add_paragraph('Version: V1.0', style='Normal')
    doc.add_page_break()

    # Version Control Table
    table = doc.add_table(rows=2, cols=4)
    table.style = 'Table Grid'
    hdr_cells = table.rows[0].cells
    hdr_cells[0].text = 'Version'
    hdr_cells[1].text = 'Date'
    hdr_cells[2].text = 'Author'
    hdr_cells[3].text = 'Change Description'

    row_cells = table.rows[1].cells
    row_cells[0].text = 'V1.0'
    row_cells[1].text = datetime.now().strftime("%Y-%m-%d")
    row_cells[2].text = author or DEFAULT_AUTHOR
    row_cells[3].text = 'Initial Draft'

    doc.add_page_break()

    # TOC placeholder
    doc.add_paragraph('Table of Contents (Update in Word)', style='Heading 1')
    doc.add_page_break()

    # Add BRD content
    for line in brd_md.splitlines():
        if line.startswith("# "):
            doc.add_paragraph(line.replace("# ", ""), style='Heading 1')
        elif line.startswith("## "):
            doc.add_paragraph(line.replace("## ", ""), style='Heading 2')
        elif line.startswith("### "):
            doc.add_paragraph(line.replace("### ", ""), style='Heading 3')
        else:
            doc.add_paragraph(line)

    # Footer with page numbers
    section = doc.sections[0]
    footer = section.footer
    paragraph = footer.paragraphs[0]
    paragraph.text = 'Page '
    fld = OxmlElement('w:fldSimple')
    fld.set(qn('w:instr'), 'PAGE')
    paragraph._p.append(fld)

    bio = io.BytesIO()
    doc.save(bio)
    bio.seek(0)
    return bio

# -----------------------------
# -------- STREAMLIT UI -------
# -----------------------------

st.set_page_config(page_title="BRD Generator – SAS → Teradata SQL", layout="wide")
st.title("Bank-Branded Detailed BRD Generator – SAS → Teradata SQL")

with st.form(key='project_form'):
    project_title = st.text_input("Project Title", value=DEFAULT_PROJECT_TITLE)
    author = st.text_input("Author", value=DEFAULT_AUTHOR)
    submitted = st.form_submit_button("Save Project Info")

with st.sidebar:
    st.header("Configuration")
    org_name = st.text_input("Organisation", value="Acme Bank")
    temperature = st.slider("LLM Temperature", 0.0, 1.0, LLM_TEMPERATURE, 0.05)
    OLLAMA_MODEL = st.text_input("Ollama Model", value=OLLAMA_MODEL)
    extra_notes = st.text_area("Extra Analyst Notes (optional)")

col_left, col_right = st.columns([1, 1])

with col_left:
    st.subheader("1) Upload SAS Code")
    sas_files = st.file_uploader("Upload SAS files", type=["sas", "txt"], accept_multiple_files=True)

with col_right:
    st.subheader("2) Upload SQL (optional)")
    sql_files = st.file_uploader("Upload SQL files", type=["sql", "txt"], accept_multiple_files=True)

sas_code = ""
if sas_files:
    for f in sas_files:
        sas_code += f"\n/* {f.name} */\n" + f.read().decode("utf-8", errors="ignore")

sql_code = ""
if sql_files:
    for f in sql_files:
        sql_code += f"\n-- {f.name}\n" + f.read().decode("utf-8", errors="ignore")

if sas_code and st.button("Generate Detailed BRD", type="primary"):
    sas_meta = extract_sas_metadata(sas_code)
    sql_meta = extract_sql_metadata(sql_code) if sql_code else {"referenced_tables": [], "ddl_ops": [], "dml_ops": []}

    st.subheader("Auto-extracted Metadata")
    st.json({"sas": sas_meta, "sql": sql_meta})

    prompt = build_brd_prompt(org_name, project_title, sas_meta, sql_meta, sas_code, sql_code, extra_notes)
    brd_md = call_ollama(prompt, system=SYSTEM_PROMPT, temperature=temperature)

    st.subheader("Generated Detailed BRD")
    st.markdown(brd_md)

    bio = create_word_brd(brd_md, project_title, author)
    st.download_button("Download BRD (Word)", data=bio.getvalue(), file_name="Bank_Branded_BRD.docx", mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document")
